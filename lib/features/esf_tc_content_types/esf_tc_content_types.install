<?php

/**
 * @file
 * Install, update and uninstall functions for esf_tc_content_types module.
 */

/**
 * Implements hook_install().
 */
function esf_tc_content_types_install() {
  $t = get_t();
  drupal_set_message($t("The feature ESF TC content types has been installed."));
}

/**
 * Implements hook_uninstall().
 */
function esf_tc_content_types_uninstall() {
  $t = get_t();

  // Deletes the Call types taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('call_types');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the ESF Countries and regions taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('esf_countries_regions');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the ESF themes taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('esf_themes');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the Languages taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('languages');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the Organisation types taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('organisation_types');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the Project activities taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('project_activities');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  // Deletes the Project target groups taxonomy term.
  $vocabulary = taxonomy_vocabulary_machine_name_load('project_target_groups');
  if ($vocabulary) {
    $vid = $vocabulary->vid;
    taxonomy_vocabulary_delete($vid);
  }

  drupal_set_message($t("Specific ESF vocabularies have been deleted from your site."));
  drupal_set_message($t("The feature ESF TC content types has been uninstalled."));
}

/**
 * Implements hook_enable().
 */
function esf_tc_content_types_enable() {
  $t = get_t();

  // Enable SolR indexation for content types.
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_call_for_project', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_hp_slide', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_organisation', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_project', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_tca', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_news', 'add');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_event', 'add');
  multisite_drupal_toolbox_config_solr_bundle('forum', 'add');

  drupal_set_message($t("The feature ESF TC content types has been enabled."));
}

/**
 * Implements hook_disable().
 */
function esf_tc_content_types_disable() {
  $t = get_t();

  // Disable content types.
  multisite_drupal_toolbox_disable_content_type('esf_tnc_call_for_project');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_hp_slide');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_organisation');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_project');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_tca');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_news');
  multisite_drupal_toolbox_disable_content_type('esf_tnc_event');
  multisite_drupal_toolbox_disable_content_type('forum');

  // Disable SolR indexation for content types.
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_call_for_project', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_hp_slide', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_organisation', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_project', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_tca', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_news', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_event', 'delete');
  multisite_drupal_toolbox_config_solr_bundle('forum', 'delete');

  drupal_set_message($t("The feature ESF TC content types has been disabled."));
}

/**
 * Implements hook_update_N().
 */
function esf_tc_content_types_update_7101() {
  // Delete unused fields.
  $fields = array(
    'field_org_content_managers',
    'field_tca_content_managers_tca',
    'field_org_notification',
    'field_org_attachments',
    'field_project_ma_responsible',
    'field_project_attachments',
    'field_esf_type_call',
    'field_profile_cont_cnt_managers',
    'field_organisation',
    'field_profile_contact_contact',
    'field_profile_contat_country',
  );
  foreach ($fields as $field) {
    if (field_info_field($field)) {
      field_delete_field($field);
    };
  }

  // Remove all conditional fields.
  db_delete('conditional_fields')
    ->execute();

  // Delete Global call content type.
  multisite_drupal_toolbox_disable_content_type('esf_tnc_global_call');
  multisite_drupal_toolbox_config_solr_bundle('esf_tnc_global_call', 'delete');
}

/**
 * Implements hook_update_N().
 */
function esf_tc_content_types_update_7102() {
  // Delete unused fields.
  $fields = array(
    'field_call_themes',
    'field_call_country',
    'field_call_other_countries',
    'field_org_is_ma_ib_type',
    'field_editorial_status',
    'field_profile_cont_informed_esf',
  );
  foreach ($fields as $field) {
    if (field_info_field($field)) {
      field_delete_field($field);
    };
  }
  // Insert default image 4/3 format.
  $folder_path = drupal_get_path('module', 'esf_tc_content_types') . '/default_images/';
  $filename = 'default_image-4_3-640x360.png';
  $source = $folder_path . $filename;
  // Create new file.
  if (file_exists($source)) {
    $file = new stdClass();
    $file->filename = $filename;
    $file->timestamp = REQUEST_TIME;
    $file->uri = $source;
    $file->filemime = file_get_mimetype($source);
    $file->uid = 1;
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_copy($file, 'public://default_images', FILE_EXISTS_REPLACE);
    variable_set('esf_tnc_4_3_default_image_fid', $file->fid);
  }
}

/**
 * Implements hook_update_N().
 */
function esf_tc_content_types_update_7103() {
  // Associate the default sections to the all active users.
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->execute();

  if (!empty($results['user'])) {
    $uids = array_keys($results['user']);
    foreach ($uids as $uid) {
      _esf_tc_content_types_user_set_default_sections($uid);
    }
    unset($uid);
    $message = t('@count have been associated with default sections', array('@count' => count($results['user'])));
    drupal_set_message($message);
    watchdog('workbench_access', $message, array(), WATCHDOG_INFO);
  }
}

/**
 * Implements hook_update_N().
 */
function esf_tc_content_types_update_7104() {
  // Update status fields.
  $count = db_update('field_data_field_tca_status')
    ->fields(array('field_tca_status_value' => 'orange'))
    ->execute();
  $message = t('@count status (TCA) have been replaced by the default value', array('@count' => $count));
  drupal_set_message($message);

  $count = db_update('field_data_field_fc_mas_approval_status')
    ->fields(array('field_fc_mas_approval_status_value' => 'pending-key-changes'))
    ->execute();
  $message = t('@count status (Partners project) have been replaced by the default value', array('@count' => $count));
  drupal_set_message($message);

  // Delete unsused fields.
  $fields = array(
    'field_place_of_signature',
    'field_fc_budget_activity',
    'field_fc_total_budget_',
    'field_fc_date_initial_sign',
    'field_tca_notify_partners',
    'field_tca_total_budget',
    'field_tca_start_date_activity',
    'field_tca_end_date_activity',
    'field_tca_flag_featured',
    'field_tca_logo',
    'field_tca_highlight_promo_txt',
  );
  foreach ($fields as $field) {
    if (field_info_field($field)) {
      field_delete_field($field);
    };
  }
  unset($field);
  // Clear caches.
  drupal_flush_all_caches();
}

/**
 * Implements hook_update_N().
 *
 * Filling Notification choice for empty fields on organisation \
 * and rebuild node permissions.
 */
function esf_tc_content_types_update_7105() {
  // FIND organisation without notification choice.
  $sql = db_select('field_data_field_org_notif_choice', 'choice');
  $sql->rightJoin('node', NULL, 'node.nid = choice.entity_id');
  $sql->fields('node', array('nid', 'type', 'vid'))
    ->condition('type', 'esf_tnc_organisation')
    ->isNull('entity_id');

  $results = $sql->execute();
  if (!empty($results) && $results->rowCount()) {
    $nids = array();
    // Insert into data and revision field table.
    foreach ($results as $result) {
      $nids[] = $result->nid;
      // Data.
      db_insert('field_data_field_org_notif_choice')
        ->fields(array(
          'entity_type' => 'node',
          'bundle' => $result->type,
          'language' => 'und',
          'entity_id' => $result->nid,
          'revision_id' => $result->vid,
          'delta' => 0,
          'field_org_notif_choice_value' => 0,
        ))
        ->execute();
      // Revision.
      db_insert('field_revision_field_org_notif_choice')
        ->fields(array(
          'entity_type' => 'node',
          'bundle' => $result->type,
          'language' => 'und',
          'entity_id' => $result->nid,
          'revision_id' => $result->vid,
          'delta' => 0,
          'field_org_notif_choice_value' => 0,
        ))
        ->execute();
    }
    unset($result);
    if (!empty($nids)) {
      // Clear Cache.
      cache_clear_all($nids, 'cache_entity_node');
      $message = t('@count organisations have been updated', array('@count' => count($nids)));
      drupal_set_message($message);
      watchdog('feature update', $message);
    }
  }
  // Rebuild Permission for TCA.
  node_access_rebuild();
}
