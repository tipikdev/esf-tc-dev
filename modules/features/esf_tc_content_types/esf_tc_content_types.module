<?php
/**
 * @file
 * Code for the esf_tc_content_types feature.
 */

include_once 'esf_tc_content_types.features.inc';
include_once 'esf_tc_content_types.theme.inc';
include_once 'esf_tc_content_types.block.inc';

/**
 * Implements hook_node_presave().
 */
function esf_tc_content_types_node_presave($node) {
  global $user;

  if ($node->type == 'forum' && $node->is_new) {
    // Notify forum moderator on new content.
    $forum_term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
    $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
    if (!empty($emails)) {
      rules_invoke_component('esf_tc_content_types_notify_forum_moderator_on_new_post', $user, $emails, $forum_term, $node);
    }
  }
}

/**
 * Implements hook_comment_insert().
 */
function esf_tc_content_types_comment_insert($comment) {
  global $user;

  // Notify forum moderator on new comment.
  $node = node_load($comment->nid);
  $forum_term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
  $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
  if (!empty($emails)) {
    rules_invoke_component('esf_tc_content_types_notify_forum_moderator_on_new_comment', $user, $emails, $forum_term, $node, $comment);
  }

}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter organisation node form.
 */
function esf_tc_content_types_form_esf_tnc_organisation_node_form_alter(&$form, &$form_state, $form_id) {
  // Add afterbuild function to manage states on field collection.
  $form['field_org_additional_contacts'][LANGUAGE_NONE]['#after_build'][] = 'esf_tc_content_types_field_org_additional_contacts_after_build';

  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_organisation_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Organisation MA/IB type field access - only for webmaster.
  $form['field_org_is_ma_ib_type']['#access'] = user_access('administer nodes');

  // Other countries field states.
  $other_country_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($other_country_term_tid != NULL) {
    $form['field_org_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
      'required' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
    );
  }

  // Organisation types field states.
  $form['field_org_type_of_organisation']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_is_ma_ib_type[und]"]' => array('checked' => FALSE),
    ),
    'required' => array(
      ':input[name="field_org_is_ma_ib_type[und]"]' => array('checked' => FALSE),
    ),
  );

  // Other type of organisation field states.
  $other_organisation_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'organisation_types');
  if ($other_organisation_term_tid != NULL) {
    $form['field_org_specify_type']['#states'] = array(
      'visible' => array(
        ':input[name="field_org_is_ma_ib_type[und]"]' => array('checked' => FALSE),
        ':input[name="field_org_type_of_organisation[und]"]' => array('value' => $other_organisation_term_tid),
      ),
      'required' => array(
        ':input[name="field_org_is_ma_ib_type[und]"]' => array('checked' => FALSE),
        ':input[name="field_org_type_of_organisation[und]"]' => array('value' => $other_organisation_term_tid),
      ),
    );
  }

  // Legal contact fields states.
  $form['field_org_contact_legal_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact_legal_email']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'yes'),
    ),
  );

  // Change Field Access.
  if (!user_access('administer nodes')) {
    $form['field_org_flag_featured']['#access'] = FALSE;
    $form['field_org_logo_promotional']['#access'] = FALSE;
    $form['field_org_high_promo_txt_section']['#access'] = FALSE;
  }
}

/**
 * Custom afterbuild function to manage additional contact field collection.
 */
function esf_tc_content_types_field_org_additional_contacts_after_build($form, &$form_state) {
  // Additional contact states.
  foreach ($form as $k => $v) {
    if (isset($v['#entity_type']) && $v['#entity_type'] == 'field_collection_item') {
      $form[$k]['field_fc_org_contact']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
      );

      $form[$k]['field_fc_org_name']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_email']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_role']['#states'] = array(
        'required' => array(
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no')),
          'or',
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes')),

        ),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * Add custom organisation node form validation.
 */
function esf_tc_content_types_organisation_validate($form, &$form_state) {
  // Check fields values if the organisation is not MA/IB.
  if (!$form_state['values']['field_org_is_ma_ib_type'][LANGUAGE_NONE][0]['value']) {
    // Check Organisation type value.
    if (empty($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE][0]['tid'])) {
      form_set_error('field_org_type_of_organisation', t('!name field is required.', array('!name' => $form['field_org_type_of_organisation'][LANGUAGE_NONE]['#title'])));
    }
    // Check Other organisation value.
    if (!empty($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE])) {
      $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'organisation_types');
      if ($tid != NULL) {
        if ($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_org_specify_type'][LANGUAGE_NONE][0]['value'])) {
          form_set_error('field_org_specify_type', t('!name field is required.', array('!name' => $form['field_org_specify_type'][LANGUAGE_NONE]['#title'])));
        }
      }
    }
  }

  // Check Other country value.
  if (!empty($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_org_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_org_other_countries', t('!name field is required.', array('!name' => $form['field_org_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }

  if ($form_state['values']['field_esf_editorial_status'][LANGUAGE_NONE][0]['value'] == 'published') {
    $contacts = $form_state['values']['field_org_additional_contacts'][LANGUAGE_NONE];
    foreach ($contacts as $key => $contact) {
      if (is_numeric($key) && empty($contact['field_fc_org_name'][LANGUAGE_NONE][0]['value']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'no') {
        form_set_error('field_fc_org_name', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_name'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_email'][LANGUAGE_NONE][0]['value']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'no') {
        form_set_error('field_fc_org_email', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_email'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_contact'][LANGUAGE_NONE][0]['target_id']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'yes') {
        form_set_error('field_fc_org_contact', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_contact'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_role'][LANGUAGE_NONE][0]['value']) && !empty($contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_fc_org_role', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_role'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter project node form.
 */
function esf_tc_content_types_form_esf_tnc_project_node_form_alter(&$form, &$form_state, $form_id) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_project_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Other countries field states.
  $other_country_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($other_country_term_tid != NULL) {
    $form['field_project_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
      'required' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
    );
  }

  // Add callback to display calls per selected country.
  $selected_country = isset($form_state['values']['field_esf_country_ref']) ? $form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] : '';

  $form['field_esf_country_ref'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => '_esf_tc_content_types_project_country_callback',
    'event' => 'change',
    'wrapper' => 'call_involved_div',
  );

  // Manage field to be replace after callback.
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#prefix'] = '<div id="call_involved_div">';
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#suffix'] = '</div>';
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#options'] = _esf_tc_content_types_get_calls_by_country_options($selected_country);
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#default_value'] = isset($form_state['values']['field_project_call_for_projects']) ? $form_state['values']['field_project_call_for_projects'] : '';
}

/**
 * Custom callback to display MA per selected country.
 */
function _esf_tc_content_types_project_country_callback($form, $form_state) {
  return $form['field_project_call_for_projects'];
}

/**
 * Return all calls for project per country as list options.
 */
function _esf_tc_content_types_get_calls_by_country_options($country_tid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'));
  $query->join('field_data_field_call_country', 'c', 'n.nid = c.entity_id');
  $query->condition('c.field_call_country_tid', $country_tid)
    ->condition('n.status', 1);
  $query->orderBy('n.title', 'ASC');
  $result = $query->execute();

  // Add default 1st entry ('select a value').
  $options = array('_none' => t('- Select a value -'));
  foreach ($result as $call) {
    $options[$call->nid] = $call->title;
  }

  return $options;
}

/**
 * Implements hook_form_validate().
 *
 * Add custom project node form validation.
 */
function esf_tc_content_types_project_validate($form, &$form_state) {
  // Check Other country value.
  if (!empty($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_project_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_project_other_countries', t('!name field is required.', array('!name' => $form['field_project_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter call for call of project node form.
 */
function esf_tc_content_types_form_esf_tnc_call_for_project_node_form_alter(&$form, &$form_state) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_call_for_project_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Other countries field states.
  $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($tid != NULL) {
    $form['field_call_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_call_country[und]"]' => array('value' => $tid),
      ),
      'required' => array(
        ':input[name="field_call_country[und]"]' => array('value' => $tid),
      ),
    );
  }

  // Add callback to display MA per selected country.
  $selected_country = isset($form_state['values']['field_call_country']) ? $form_state['values']['field_call_country'][LANGUAGE_NONE][0]['tid'] : '';

  $form['field_call_country'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => '_esf_tc_content_types_call_country_callback',
    'event' => 'change',
    'wrapper' => 'org_involved_div',
  );

  // Manage field to be replace after callback.
  $form['field_call_org_involved'][LANGUAGE_NONE]['#prefix'] = '<div id="org_involved_div">';
  $form['field_call_org_involved'][LANGUAGE_NONE]['#suffix'] = '</div>';
  $form['field_call_org_involved'][LANGUAGE_NONE]['#options'] = _esf_tc_content_types_get_organisations_by_country_options($selected_country);
  $form['field_call_org_involved'][LANGUAGE_NONE]['#default_value'] = isset($form_state['values']['field_call_org_involved']) ? $form_state['values']['field_call_org_involved'] : '';
}

/**
 * Custom callback to display MA per selected country.
 */
function _esf_tc_content_types_call_country_callback($form, $form_state) {
  return $form['field_call_org_involved'];
}

/**
 * Return all organisations per country as list options.
 */
function _esf_tc_content_types_get_organisations_by_country_options($country_tid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'));
  $query->join('field_data_field_org_is_ma_ib_type', 't', 'n.nid = t.entity_id');
  $query->join('field_data_field_esf_country_ref', 'c', 'n.nid = c.entity_id');
  $query->condition('t.field_org_is_ma_ib_type_value', 1)
    ->condition('c.field_esf_country_ref_tid', $country_tid)
    ->condition('n.status', 1);
  $query->orderBy('n.title', 'ASC');
  $result = $query->execute();

  // Add default 1st entry ('select a value').
  $options = array('_none' => t('- Select a value -'));
  foreach ($result as $org) {
    $options[$org->nid] = $org->title;
  }

  return $options;
}

/**
 * Call for project custom validation.
 */
function esf_tc_content_types_call_for_project_validate($form, &$form_state) {
  if (!empty($form_state['values']['field_call_country'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_call_country'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_call_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_call_other_countries', t('!name field is required.', array('!name' => $form['field_call_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter TCA node form.
 */
function esf_tc_content_types_form_esf_tnc_tca_node_form_alter(&$form, &$form_state, $form_id) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_tca_validate';
}

/**
 * TCA custom validation.
 */
function esf_tc_content_types_tca_validate($form, &$form_state) {
  $partners = $form_state['values']['field_tca_partner_organisations'][LANGUAGE_NONE];
  if ($form_state['values']['field_esf_editorial_status'][LANGUAGE_NONE][0]['value'] == 'published') {
    foreach ($partners as $key => $partner) {
      if (is_numeric($key)) {
        if (empty($partner['field_fc_partner_project'][LANGUAGE_NONE][0]['target_id'])) {
          form_set_error('field_fc_partner_project', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_partner_project'][LANGUAGE_NONE]['#title'])));
        }
        else {
          $budgets = $partner['field_fc_budget_activity'][LANGUAGE_NONE];
          foreach ($budgets as $key_b => $budget) {
            if (is_numeric($key_b) && empty($budget['field_fc_budget_activity1'][LANGUAGE_NONE][0]['value'])) {
              form_set_error('field_fc_budget_activity1', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_budget_activity'][LANGUAGE_NONE][0]['field_fc_budget_activity1'][LANGUAGE_NONE]['#title'])));
            }
            if (is_numeric($key_b) && empty($budget['field_fc_budget'][LANGUAGE_NONE][0]['value'])) {
              form_set_error('field_fc_budget', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_budget_activity'][LANGUAGE_NONE][0]['field_fc_budget'][LANGUAGE_NONE]['#title'])));
            }
          }
        }

      }

    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function esf_tc_content_types_node_access_records($node) {
  $grants = array();

  // Denied access for non-public forum node per forum thematics.
  // Update and delete grants are managed by WB Access and basic permissions.
  if (is_object($node) && $node->type == 'forum') {
    $visibility = field_get_items('node', $node, 'field_topic_public', LANGUAGE_NONE);
    $public = reset($visibility)['value'];
    if (!$public) {
      $forum_section_field = field_get_items('node', $node, 'taxonomy_forums', LANGUAGE_NONE);
      $forum_section = $forum_section_field[0]['tid'];
      $grants[] = array(
        'realm' => 'forum_private',
        'gid' => $forum_section,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function esf_tc_content_types_node_grants($account, $op) {
  $grants = array();

  // Set default grants condition for forum access.
  $grants['forum_private'] = array(0);

  if ($op == 'view') {
    if ($account->uid) {
      // Check permission access to forum section.
      $wb_user_access_tree = workbench_access_get_user_tree($account);
      if (!empty($wb_user_access_tree)) {
        foreach ($wb_user_access_tree as $key => $term) {
          $grants['forum_private'][] = $key;
        }
      }
    }
  }
  return $grants;
}

/**
 * Implements template_preprocess_forums().
 */
function esf_tc_content_types_preprocess_forums(&$variables) {
  // Add custom content to forum page.
  if ($variables['tid'] != 0) {
    $variables['topics_title'] = t('Discussions');
    $variables['news'] = _esf_tc_render_block('views', 'esf_news-block_1');
    $variables['events'] = _esf_tc_render_block('views', 'esf_events-block_1');
    $variables['action_links'] = menu_local_actions();
  }
}

/**
 * Render block.
 */
function _esf_tc_render_block($block_module, $block_name) {
  $block_load = block_load($block_module, $block_name);
  $render_blocks = _block_render_blocks(array($block_load));
  $renderable_block = _block_get_renderable_array($render_blocks);
  return drupal_render($renderable_block);
}

/**
 * Implements hook_menu_alter().
 */
function esf_tc_content_types_menu_alter(&$items) {
  $items['forum/%forum_forum/join'] = array(
    'title' => 'Join the network',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => '_esf_tc_content_types_manage_networking',
    'page arguments' => array(1, 2),
    'access callback' => 'user_is_logged_in',
  );

  $items['forum/%forum_forum/remove'] = array(
    'title' => 'Remove me from the newtork',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => '_esf_tc_content_types_manage_networking',
    'page arguments' => array(1, 2),
    'access callback' => 'user_is_logged_in',
  );
}

/**
 * Notify the forum moderator.
 */
function _esf_tc_content_types_manage_networking($forum_term, $op) {
  global $user;

  if ($op == 'join') {
    // Notify the forum moderator when asking to join.
    $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
    if (empty($emails)) {
      drupal_set_message(t('There is currently no moderator for this network. Please contact the webmaster.'), 'warning');
    }
    else {
      rules_invoke_component('esf_tc_content_types_notify_forum_moderator_to_add_user', $user, $forum_term, $emails);
    }
  }
  elseif ($op == 'remove') {
    // Remove directly the user from the network.
    workbench_access_user_section_delete($user->uid, $forum_term->tid, 'taxonomy');
    drupal_set_message(t('Your access to the netowrk has been removed'));
  }

  // Redirect to forum page.
  drupal_goto(drupal_get_path_alias('forum/' . $forum_term->tid));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function esf_tc_content_types_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add local link to forum pages.
  if ($root_path == 'forum/%') {
    if (user_is_logged_in()) {
      $tid = (isset($router_item['page_arguments'][0]) ? $router_item['page_arguments'][0]->tid : 0);
      $forum_term = forum_forum_load($tid);
      if ($forum_term) {
        // Get the access tree for the user account.
        $user_access_tree = workbench_access_get_user_tree($user);

        // Add specific action link regarding the user is already member
        // of the network or not.
        $links = array();
        if (!array_key_exists($tid, $user_access_tree)) {
          $links['forum_join'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Join this network'),
              'href' => 'forum/' . $forum_term->tid . '/join',
            ),
          );
        }
        else {
          $links['forum_remove'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Remove me from this network'),
              'href' => 'forum/' . $forum_term->tid . '/remove',
            ),
          );
        }
        $data['actions']['output'] = $links;
      }
    }
  }
}

/**
 * Get emails of moderators by forum.
 */
function _esf_tc_content_types_get_forum_moderators($forum_term) {
  $moderator_rid = ($role = user_role_load_by_name('forum moderator')) ? $role->rid : NULL;

  // Retrieve the moderators' emails of the network.
  $query = db_select('users', 'u')
    ->fields('u', array('uid', 'mail'));
  $query->join('workbench_access_user', 'wau', 'u.uid = wau.uid');
  $query->join('users_roles', 'ur', 'u.uid = ur.uid');
  $query->condition('wau.access_scheme', 'taxonomy')
    ->condition('wau.access_id', $forum_term->tid)
    ->condition('ur.rid', $moderator_rid);
  $result = $query->execute();

  $emails = array();
  foreach ($result as $account) {
    $emails[] = $account->mail;
  }
  return $emails;
}

/**
 * Return tid of a term in a specific vocabulary.
 */
function _esf_tc_content_types_get_term_id_by_vocabulary($term, $vocabulary) {
  $tid = NULL;
  $term_other_country = taxonomy_get_term_by_name($term, $vocabulary);
  if (!empty($term_other_country)) {
    $tid = array_pop($term_other_country)->tid;
  }
  return $tid;
}

/**
 * Implements hook_user_login().
 */
function esf_tc_content_types_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || variable_get('login_destination_immediate_redirect', FALSE)) {
    // Redirect an authenticated only user or contact user to the profile page
    // if no profile attached to user.
    if (in_array('contact', $account->roles) || count($account->roles) == 1) {
      $contact_profile = profile2_load_by_user($account, 'contact_profile');
      if (empty($contact_profile)) {
        drupal_set_message(t('You have been redirected to fill out your contact information. You can also enter the token received in the email to link your account with an organisation.'));
        drupal_goto("user/$account->uid/edit/contact_profile");
      }
    }
  }
}

/**
 * Implements hook_field_default_field_instances_alter().
 *
 * Set the default image.
 */
/*
function esf_tc_content_types_field_default_field_instances_alter(&$fields) {
  // Event default image.
  if (isset($fields['node-esf_tnc_event-field_esf_event_picture']['settings']['default_image'])) {
    $variable_name = 'esf_tc_field_esf_event_picture_fid';
    $fid = $fields['node-esf_tnc_event-field_esf_event_picture']['settings']['default_image'];
    $fields['field_esf_event_picture']['settings']['default_image'] = variable_get($variable_name, $fid);
  }

  // News default image.
  if (isset($fields['node-esf_tnc_event-field_esf_news_picture']['settings']['default_image'])) {
    $variable_name = 'esf_tc_field_esf_news_picture_fid';
    $fid = $fields['node-esf_tnc_event-field_esf_news_picture']['settings']['default_image'];
    $fields['node-esf_tnc_event-field_esf_news_picture']['settings']['default_image'] = variable_get($variable_name, $fid);
  }
}
*/
