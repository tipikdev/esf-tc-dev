<?php
/**
 * @file
 * Code for the esf_tc_content_types feature.
 */

include_once 'esf_tc_content_types.features.inc';
include_once 'esf_tc_content_types.theme.inc';
include_once 'esf_tc_content_types.block.inc';
include_once 'esf_tc_content_types.notification.inc';

/**
 * Implements hook_permission().
 */
function esf_tc_content_types_permission() {
  // Block And Archive permission.
  $project_database_ct = _esf_tc_content_types_get_project_database_types();
  $perm = array();
  if (is_array($project_database_ct)) {
    foreach ($project_database_ct as $type) {
      $info = node_type_get_type($type);
      $perm += array(
        "archive any $type content" => array(
          'title' => t('%type_name: Archive any content', array('%type_name' => $info->name)),
        ),
        "block any $type content" => array(
          'title' => t('%type_name: Block any content', array('%type_name' => $info->name)),
        ),
        "republish any $type content" => array(
          'title' => t('%type_name: Publish any blocked, need deletion and archived content', array('%type_name' => $info->name)),
        ),
      );
    }
  }
  return $perm;
}

/**
 * Implements hook_node_presave().
 */
function esf_tc_content_types_node_presave($node) {
  global $user;

  if ($node->type == 'forum' && $node->is_new) {
    // Notify forum moderator on new content.
    $forum_term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
    $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
    if (!empty($emails)) {
      rules_invoke_component('esf_tc_content_types_notify_forum_moderator_on_new_post', $user, $emails, $forum_term, $node);
    }
  }
}

/**
 * Implements hook_comment_insert().
 */
function esf_tc_content_types_comment_insert($comment) {
  global $user;

  // Notify forum moderator on new comment.
  $node = node_load($comment->nid);
  $forum_term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
  $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
  if (!empty($emails)) {
    rules_invoke_component('esf_tc_content_types_notify_forum_moderator_on_new_comment', $user, $emails, $forum_term, $node, $comment);
  }

}

/**
 * Implements hook_form_alter().
 *
 * Alter contact profile form.
 */
function esf_tc_content_types_form_profile2_edit_contact_profile_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#submit'][] = '_esf_tc_content_types_contact_submit';
  $form['profile_contact_profile']['field_editorial_status']['#access'] = FALSE;
}

/**
 * Custom submit for the contact profile form.
 */
function _esf_tc_content_types_contact_submit($form, &$form_state) {
  $contact_uid = $form_state['user']->uid;
  // Synchronize the user with all organisation using the token email.
  $token_email = $form_state['values']['profile_contact_profile']['field_token_email'][LANGUAGE_NONE][0]['email'];
  if (!empty($token_email)) {
    // Get all organisations having this email as legal contact and
    // set unknown contact.
    $query = db_select('node', 'n')
      ->fields('n', array('nid'));
    $query->join('field_data_field_org_contact_legal_email', 'e', 'n.nid = e.entity_id');
    $query->join('field_data_field_esf_country_ref', 'c', 'n.nid = c.entity_id');
    $query->condition('e.field_org_contact_legal_email_value', $token_email);
    $result = $query->execute();

    foreach ($result as $org) {
      $contact = node_load($org->nid);
      $contact_wrapper = entity_metadata_wrapper('node', $contact);
      // Save info about current contact.
      $contact_wrapper->field_org_contact_account->set('yes');
      $contact_wrapper->field_org_contact->set($contact_uid);
      // Reset previous contact value.
      $contact_wrapper->field_org_contact_legal_name->set('');
      $contact_wrapper->field_org_contact_legal_email->set('');
      $contact_wrapper->save();
    }

    // Get all field collections having this email as legal contact and
    // set as unknown contact.
    $query = db_select('field_data_field_fc_org_email', 'e')
      ->fields('e', array('entity_id'));
    $query->condition('e.field_fc_org_email_value', $token_email);
    $result = $query->execute();

    foreach ($result as $coll) {
      // Load field collection.
      $contact = field_collection_item_load($coll->entity_id);
      $contact_wrapper = entity_metadata_wrapper('field_collection_item', $contact);
      // Save info about current contact.
      $contact_wrapper->field_fc_contact_account->set('yes');
      $contact_wrapper->field_fc_org_contact->set($contact_uid);
      // Reset previous contact value.
      $contact_wrapper->field_fc_org_name->set('');
      $contact_wrapper->field_fc_org_email->set('');
      $contact_wrapper->save();
    }

    // Reset token value.
    $form_state['values']['profile_contact_profile']['field_token_email'][LANGUAGE_NONE][0]['email'] = '';

    drupal_set_message(t('Your account has been synchronized with all organisations that were referencing you.'));
  }
  profile2_form_submit_handler($form, $form_state);
  $form_state['redirect'] = 'user/' . $contact_uid;
}

/**
 * Implements hook_form_alter().
 */
function esf_tc_content_types_form_alter(&$form, &$form_state, $form_id) {
  // Transform editorial status to buttons.
  $editorial_field_name = _esf_tc_content_types_get_editorial_status_field_name();
  $color_class = array(
    'success' => 'btn-success',
    'info' => 'btn-info',
    'warning' => 'btn-warning',
    'danger' => 'btn-danger',
  );

  // Avoid checking on ajax refresh.
  if (isset($form[$editorial_field_name]) && (!isset($form_state['input']['ajax_html_ids']))) {
    // Add Submit method.
    $form['#submit'][] = 'esf_tc_content_types_projects_database_submit';
    // Hide Select list.
    $form[$editorial_field_name]['#access'] = FALSE;
    // Create alternative buttons.
    $state = reset($form[$editorial_field_name][LANGUAGE_NONE]['#default_value']);
    $weight = $form['actions']['submit']['#weight'] + 1;

    // Alert if status is not published.
    _esf_tc_content_type_display_message($form['#node'], $state);

    $form['actions']['submit']['#access'] = _esf_tc_content_types_button_access('submit', $form['type']['#value'], $form['#node'], $state);

    if ($state == 'draft') {
      // Save as draft button.
      $form['actions']['submit']['#value'] = t('Save as draft');
    }

    if ($state != 'published') {
      // Publish button.
      $form['actions']['published'] = $form['actions']['submit'];
      $form['actions']['published']['#value'] = t('Publish');
      $form['actions']['published']['#weight'] = $weight++;
      $form['actions']['published']['#attributes']['class'][] = $color_class['success'];
      $form['actions']['published']['#access'] = _esf_tc_content_types_button_access('publish', $form['type']['#value'], $form['#node'], $state);
    }

    // If node exists.
    if ($form['nid']['#value']) {
      // Block button.
      $form['actions']['block'] = $form['actions']['submit'];
      $form['actions']['block']['#value'] = t('Block');
      $form['actions']['block']['#weight'] = $weight++;
      $form['actions']['block']['#attributes']['class'][] = $color_class['warning'];
      $form['actions']['block']['#access'] = _esf_tc_content_types_button_access('block', $form['type']['#value'], $form['#node'], $state);
      // Archive button.
      $form['actions']['archive'] = $form['actions']['submit'];
      $form['actions']['archive']['#value'] = t('Archive');
      $form['actions']['archive']['#weight'] = $weight++;
      $form['actions']['archive']['#attributes']['class'][] = $color_class['warning'];
      $form['actions']['archive']['#access'] = _esf_tc_content_types_button_access('archive', $form['type']['#value'], $form['#node'], $state);
      // Ask for deletion button.
      $form['actions']['ask_deletion'] = $form['actions']['submit'];
      $form['actions']['ask_deletion']['#value'] = t('Ask for deletion');
      $form['actions']['ask_deletion']['#weight'] = $weight++;
      $form['actions']['ask_deletion']['#attributes']['class'][] = $color_class['danger'];
      $form['actions']['ask_deletion']['#access'] = _esf_tc_content_types_button_access('needs-deletion', $form['type']['#value'], $form['#node'], $state);
    }
    // Delete.
    if (isset($form['actions']['delete']) && $form['actions']['delete']) {
      $form['actions']['delete']['#attributes']['class'][] = $color_class['danger'];
    }
  }

  // Hide format text option under text editor.
  drupal_add_js('jQuery(window).load(function() {jQuery(".filter-wrapper").hide();});', 'inline');
  // Hide Show row weights link.
  drupal_add_js('jQuery(window).load(function() {jQuery(".tabledrag-toggle-weight").hide();});', 'inline');
  drupal_add_js('jQuery(document).ajaxSuccess(function() {jQuery(".tabledrag-toggle-weight").hide();});', 'inline');
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter organisation node form.
 */
function esf_tc_content_types_form_esf_tnc_organisation_node_form_alter(&$form, &$form_state, $form_id) {
  // Add afterbuild function to manage states on field collection.
  $form['field_org_additional_contacts'][LANGUAGE_NONE]['#after_build'][] = 'esf_tc_content_types_field_org_additional_contacts_after_build';

  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';
  $form['#validate'][] = 'esf_tc_content_types_organisation_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Other countries field states.
  $other_country_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($other_country_term_tid != NULL) {
    $form['field_org_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
      'required' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
    );
  }

  // Other type of organisation field states.
  $other_organisation_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'organisation_types');
  if ($other_organisation_term_tid != NULL) {
    $form['field_org_specify_type']['#states'] = array(
      'visible' => array(
        ':input[name="field_org_type_of_organisation[und]"]' => array('value' => $other_organisation_term_tid),
      ),
      'required' => array(
        ':input[name="field_org_type_of_organisation[und]"]' => array('value' => $other_organisation_term_tid),
      ),
    );
  }

  // Legal contact fields states.
  $form['field_org_contact_legal_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact_legal_email']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'yes'),
    ),
  );

  // Change Field Access.
  if (!user_access('administer nodes')) {
    $form['field_org_flag_featured']['#access'] = FALSE;
    $form['field_org_logo_promotional']['#access'] = FALSE;
    $form['field_org_high_promo_txt_section']['#access'] = FALSE;
  }
}

/**
 * Custom afterbuild function to manage additional contact field collection.
 */
function esf_tc_content_types_field_org_additional_contacts_after_build($form, &$form_state) {
  // Additional contact states.
  foreach ($form as $k => $v) {
    if (isset($v['#entity_type']) && $v['#entity_type'] == 'field_collection_item') {
      $form[$k]['field_fc_org_contact']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
      );

      $form[$k]['field_fc_org_name']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_email']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_role']['#states'] = array(
        'required' => array(
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no')),
          'or',
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes')),

        ),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * Add custom organisation node form validation.
 */
function esf_tc_content_types_organisation_validate($form, &$form_state) {
  // Check Organisation type value.
  if (empty($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE][0]['tid'])) {
    form_set_error('field_org_type_of_organisation', t('!name field is required.', array('!name' => $form['field_org_type_of_organisation'][LANGUAGE_NONE]['#title'])));
  }
  // Check Other organisation value.
  if (!empty($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'organisation_types');
    if ($tid != NULL) {
      if ($form_state['values']['field_org_type_of_organisation'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_org_specify_type'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_org_specify_type', t('!name field is required.', array('!name' => $form['field_org_specify_type'][LANGUAGE_NONE]['#title'])));
      }
    }
  }

  // Check Other country value.
  if (!empty($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_org_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_org_other_countries', t('!name field is required.', array('!name' => $form['field_org_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }

  // Check required values if the node (editorial status) is published.
  if ($form_state['values']['op'] == 'Publish') {
    // Legal contact.
    if ($form_state['values']['field_org_contact_account'][LANGUAGE_NONE][0]['value'] == 'yes' && empty($form_state['values']['field_org_contact'][LANGUAGE_NONE][0]['target_id'])) {
      form_set_error('field_org_contact', t('!name field is required.', array('!name' => $form['field_org_contact'][LANGUAGE_NONE]['#title'])));
    }
    elseif ($form_state['values']['field_org_contact_account'][LANGUAGE_NONE][0]['value'] == 'no') {
      if (empty($form_state['values']['field_org_contact_legal_name'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_org_contact_legal_name', t('!name field is required.', array('!name' => $form['field_org_contact_legal_name'][LANGUAGE_NONE]['#title'])));
      }
      if (empty($form_state['values']['field_org_contact_legal_email'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_org_contact_legal_email', t('!name field is required.', array('!name' => $form['field_org_contact_legal_email'][LANGUAGE_NONE]['#title'])));
      }
    }

    // Additional contact.
    $contacts = $form_state['values']['field_org_additional_contacts'][LANGUAGE_NONE];
    foreach ($contacts as $key => $contact) {
      if (is_numeric($key) && empty($contact['field_fc_org_name'][LANGUAGE_NONE][0]['value']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'no') {
        form_set_error('field_fc_org_name', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_name'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_email'][LANGUAGE_NONE][0]['value']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'no') {
        form_set_error('field_fc_org_email', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_email'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_contact'][LANGUAGE_NONE][0]['target_id']) && $contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'] == 'yes') {
        form_set_error('field_fc_org_contact', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_contact'][LANGUAGE_NONE]['#title'])));
      }

      if (is_numeric($key) && empty($contact['field_fc_org_role'][LANGUAGE_NONE][0]['value']) && !empty($contact['field_fc_contact_account'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_fc_org_role', t('!name field is required.', array('!name' => $form['field_org_additional_contacts'][LANGUAGE_NONE][0]['field_fc_org_role'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter project node form.
 */
function esf_tc_content_types_form_esf_tnc_project_node_form_alter(&$form, &$form_state, $form_id) {

  $type = $form['type']['#value'];

  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';
  $form['#validate'][] = 'esf_tc_content_types_project_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Other countries field states.
  $other_country_term_tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($other_country_term_tid != NULL) {
    $form['field_project_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
      'required' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $other_country_term_tid),
      ),
    );
  }

  // Add callback to display calls per selected country.
  $form['field_esf_country_ref'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => '_esf_tc_content_types_project_country_callback',
    'event' => 'change',
    'wrapper' => 'call_involved_div',
  );

  // Manage field to be replace after callback.
  $selected_country = isset($form_state['values']['field_esf_country_ref']) ? $form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] : $form['field_esf_country_ref'][LANGUAGE_NONE]['#default_value'];
  $call_default_value = '';
  if (isset($form_state['values']['field_project_call_for_projects'])) {
    $call_default_value = $form_state['values']['field_project_call_for_projects'];
  }
  elseif (isset($form['field_project_call_for_projects'][LANGUAGE_NONE]['#default_value'][0])) {
    $call_default_value = $form['field_project_call_for_projects'][LANGUAGE_NONE]['#default_value'][0];
  }

  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#prefix'] = '<div id="call_involved_div">';
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#suffix'] = '</div>';
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#options'] = _esf_tc_content_types_get_calls_by_country_options($selected_country);
  $form['field_project_call_for_projects'][LANGUAGE_NONE]['#default_value'] = $call_default_value;
}

/**
 * Custom callback to display MA per selected country.
 */
function _esf_tc_content_types_project_country_callback($form, $form_state) {
  return $form['field_project_call_for_projects'];
}

/**
 * Return all calls for project per country as list options.
 */
function _esf_tc_content_types_get_calls_by_country_options($country_tid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'));
  $query->join('field_data_field_esf_country_ref', 'c', 'n.nid = c.entity_id');
  $query->condition('c.field_esf_country_ref_tid', $country_tid)
    ->condition('n.status', 1);
  $query->orderBy('n.title', 'ASC');
  $result = $query->execute();

  // Add default 1st entry ('select a value').
  $options = array('_none' => t('- Select a value -'));
  foreach ($result as $call) {
    $options[$call->nid] = $call->title;
  }

  return $options;
}

/**
 * Implements hook_form_validate().
 *
 * Add custom project node form validation.
 */
function esf_tc_content_types_project_validate($form, &$form_state) {
  // Check Other country value.
  if (!empty($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_project_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_project_other_countries', t('!name field is required.', array('!name' => $form['field_project_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter call for call of project node form.
 */
function esf_tc_content_types_form_esf_tnc_call_for_project_node_form_alter(&$form, &$form_state) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';
  $form['#validate'][] = 'esf_tc_content_types_call_for_project_validate';

  // Hide body field.
  $form['body']['#access'] = FALSE;

  // Other countries field states.
  $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
  if ($tid != NULL) {
    $form['field_call_other_countries']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $tid),
      ),
      'required' => array(
        ':input[name="field_esf_country_ref[und]"]' => array('value' => $tid),
      ),
    );
  }

  // Add callback to display MA per selected country.
  $form['field_esf_country_ref'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => '_esf_tc_content_types_call_country_callback',
    'event' => 'change',
    'wrapper' => 'org_involved_div',
  );

  // Manage field to be replace after callback.
  $selected_country = isset($form_state['values']['field_esf_country_ref']) ? $form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] : $form['field_esf_country_ref'][LANGUAGE_NONE]['#default_value'];
  $org_default_value = '';
  if (isset($form_state['values']['field_call_org_involved'])) {
    $org_default_value = $form_state['values']['field_call_org_involved'];
  }
  elseif (isset($form['field_call_org_involved'][LANGUAGE_NONE]['#default_value'][0])) {
    $org_default_value = $form['field_call_org_involved'][LANGUAGE_NONE]['#default_value'][0];
  }
  $form['field_call_org_involved'][LANGUAGE_NONE]['#prefix'] = '<div id="org_involved_div">';
  $form['field_call_org_involved'][LANGUAGE_NONE]['#suffix'] = '</div>';
  $form['field_call_org_involved'][LANGUAGE_NONE]['#options'] = _esf_tc_content_types_get_organisations_by_country_options($selected_country);
  $form['field_call_org_involved'][LANGUAGE_NONE]['#default_value'] = $org_default_value;
}

/**
 * Custom callback to display MA per selected country.
 */
function _esf_tc_content_types_call_country_callback($form, $form_state) {
  return $form['field_call_org_involved'];
}

/**
 * Return all organisations per country as list options.
 */
function _esf_tc_content_types_get_organisations_by_country_options($country_tid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'));
  $query->join('field_data_field_org_is_ma_ib', 't', 'n.nid = t.entity_id');
  $query->join('field_data_field_esf_country_ref', 'c', 'n.nid = c.entity_id');
  $query->condition('t.field_org_is_ma_ib_value', 1)
    ->condition('c.field_esf_country_ref_tid', $country_tid)
    ->condition('n.status', 1);
  $query->orderBy('n.title', 'ASC');
  $result = $query->execute();

  // Add default 1st entry ('select a value').
  $options = array('_none' => t('- Select a value -'));
  foreach ($result as $org) {
    $options[$org->nid] = $org->title;
  }

  return $options;
}

/**
 * Call for project custom validation.
 */
function esf_tc_content_types_call_for_project_validate($form, &$form_state) {
  if (!empty($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE])) {
    $tid = _esf_tc_content_types_get_term_id_by_vocabulary('Other', 'esf_countries_regions');
    if ($tid != NULL) {
      if ($form_state['values']['field_esf_country_ref'][LANGUAGE_NONE][0]['tid'] == $tid && empty($form_state['values']['field_call_other_countries'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_call_other_countries', t('!name field is required.', array('!name' => $form['field_call_other_countries'][LANGUAGE_NONE]['#title'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter TCA node form.
 */
function esf_tc_content_types_form_esf_tnc_tca_node_form_alter(&$form, &$form_state, $form_id) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';
  $form['#validate'][] = 'esf_tc_content_types_tca_validate';
}

/**
 * TCA custom validation.
 */
function esf_tc_content_types_tca_validate($form, &$form_state) {
  $partners = $form_state['values']['field_tca_partner_organisations'][LANGUAGE_NONE];
  if ($form_state['values']['op'] == 'Publish') {
    foreach ($partners as $key => $partner) {
      if (is_numeric($key)) {
        if (empty($partner['field_fc_partner_project'][LANGUAGE_NONE][0]['target_id'])) {
          form_set_error('field_fc_partner_project', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_partner_project'][LANGUAGE_NONE]['#title'])));
        }
        else {
          $budgets = $partner['field_fc_budget_activity'][LANGUAGE_NONE];
          foreach ($budgets as $key_b => $budget) {
            if (is_numeric($key_b) && empty($budget['field_fc_budget_activity1'][LANGUAGE_NONE][0]['value'])) {
              form_set_error('field_fc_budget_activity1', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_budget_activity'][LANGUAGE_NONE][0]['field_fc_budget_activity1'][LANGUAGE_NONE]['#title'])));
            }
            if (is_numeric($key_b) && empty($budget['field_fc_budget'][LANGUAGE_NONE][0]['value'])) {
              form_set_error('field_fc_budget', t('!name field is required.', array('!name' => $form['field_tca_partner_organisations'][LANGUAGE_NONE][0]['field_fc_budget_activity'][LANGUAGE_NONE][0]['field_fc_budget'][LANGUAGE_NONE]['#title'])));
            }
          }
        }
      }
    }
  }
}

/**
 * Project database (4 content types) custom validation for drafting.
 */
function esf_tc_content_types_projects_database_draft_validate(&$form, &$form_state) {
  $editorial_field_name = _esf_tc_content_types_get_editorial_status_field_name();
  $state = isset($form_state['values'][$editorial_field_name][LANGUAGE_NONE]) ? reset($form_state['values'][$editorial_field_name][LANGUAGE_NONE])['value'] : NULL;

  $errors = form_get_errors();

  // Only skip validation on Save as Draft of a drafted content.
  if ($state == 'draft' && isset($form_state['clicked_button']) && $form_state['clicked_button']['#value'] == 'Save as draft') {
    if ($errors) {
      // Clear errors.
      form_clear_error();
      // Remove error messages.
      $error_messages = drupal_get_messages('error');
      $removed_messages = array();

      foreach ($errors as $name => $error_message) {
        // Get Field title.
        $field_name = explode(']', $name)[0];
        $is_date = FALSE;
        $required_error = '';

        if ($field_name) {
          $field_info = field_info_field($field_name);
          $field_instance = field_info_instance($form['#entity_type'], $field_name, $form['#bundle']);
          $required_error = t('!name field is required.', array('!name' => $field_instance['label']));
          $is_date = $field_info['module'] == 'date';
        }
        if (strstr($name, 'title_field]') === FALSE && ($required_error == $error_message || $is_date)) {
          $removed_messages[] = $error_message;
          unset($errors[$name]);
        }
        else {
          form_set_error($name, $error_message);
        }
      }
    }
  }
}

/**
 * Project database (4 content types) custom submit for editorial status.
 */
function esf_tc_content_types_projects_database_submit(&$form, &$form_state) {
  $content_type = $form['type']['#value'];

  $arr_status = array(
    'publish' => 'published',
    'block' => 'blocked',
    'archive' => 'archived',
    'ask for deletion' => 'needs-deletion',
  );

  $field_esf_editorial_status = _esf_tc_content_types_get_editorial_status_field_name();
  if (isset($form_state['clicked_button']['#value'])) {
    $action = strtolower($form_state['clicked_button']['#value']);
  }

  if ($action && $action != 'draft') {
    // Force publish drupal status.
    $form_state['status'] = 1;
    // Force Editorial status.
    $new_status = (isset($arr_status[$action])) ? $arr_status[$action] : NULL;
    if ($new_status) {
      $form_state['values'][$field_esf_editorial_status][LANGUAGE_NONE][0]['value'] = $new_status;
      // Notify related users.
      $emails = _esf_tc_content_types_get_associated_email($form_state['node'], TRUE);
      // Notify webmasters on special status.
      if (in_array($new_status, array('blocked', 'needs-deletion'))) {
        $emails = array_merge($emails, _esf_tc_content_types_get_webmasters_email());
      }
      if (count($emails)) {
        // Get approprieted message.
        $options = array(
          'type' => 'editorial_status',
          'content_type' => $content_type,
          'action' => $new_status,
          'node' => $form_state['node'],
        );
        $key_prefix = $content_type . '_notification_' . $new_status;

        foreach ($emails as $email) {
          drupal_mail('esf_tc_content_types', $key_prefix, $email, language_default(), $options);
        }
        unset($email);
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function esf_tc_content_types_node_access_records($node) {
  $grants = array();

  // Denied access for non-public forum node per forum thematics.
  // Update and delete grants are managed by WB Access and basic permissions.
  if (is_object($node) && $node->type == 'forum') {
    $visibility = field_get_items('node', $node, 'field_topic_public', LANGUAGE_NONE);
    $public = reset($visibility)['value'];
    if (!$public) {
      $forum_section_field = field_get_items('node', $node, 'taxonomy_forums', LANGUAGE_NONE);
      $forum_section = $forum_section_field[0]['tid'];
      $grants[] = array(
        'realm' => 'forum_private',
        'gid' => $forum_section,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
  }
  // ADD user access to referenced users into the project db content type.
  $content_types = _esf_tc_content_types_get_project_database_types();

  if (in_array($node->type, $content_types)) {
    $uids = array();
    $nids = array();
    switch ($node->type) {
      case 'esf_tnc_organisation':
        // LEGAL CONTACT.
        $uids += _esf_tc_content_types_get_references_ids('field_org_contact', $node);
        // ADDITIONAL CONTACTS.
        $contacts = field_get_items('node', $node, 'field_org_additional_contacts');
        if (is_array($contacts) && count($contacts)) {
          $cfids = array();
          foreach ($contacts as $contact) {
            $cfids[] = $contact['value'];
          }
          unset($contact);
          if (is_array($cfids) && count($cfids)) {
            $contacts = field_collection_item_load_multiple($cfids);
            foreach ($contacts as $contact) {
              $uids = array_merge($uids, _esf_tc_content_types_get_references_ids('field_fc_org_contact', $contact, 'field_collection_item'));
            }
            unset($contact);
          }
        }
        break;

      case 'esf_tnc_project':
        // Get Lead organisation contact.
        $nids = array_merge($nids, _esf_tc_content_types_get_references_ids('field_project_lead_organisation', $node));
        // Get Projects Managers ID.
        $uids = array_merge($uids, _esf_tc_content_types_get_references_ids('field_project_manager', $node));
        // Get Operational Contact ID.
        $uids = array_merge($uids, _esf_tc_content_types_get_references_ids('field_project_operat_contact', $node));
        break;

      case 'esf_tnc_tca':
        break;

    }
    // Define realm.
    $grants_template = array(
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Define realm projectdb User.
    $uids = array_unique($uids);
    if (is_array($uids) && count($uids)) {
      $grants_template['realm'] = 'projectdb';
      foreach ($uids as $uid) {
        $grants_template['gid'] = $uid;
        $grants[] = $grants_template;
      }
      unset($uid);
    }
    // Define realm projectdb Organisation.
    $nids = array_unique($nids);
    if (is_array($nids) && count($nids)) {
      $grants_template['realm'] = 'projectdb_organisation';
      foreach ($nids as $nid) {
        $grants_template['gid'] = $nid;
        $grants[] = $grants_template;
      }
      unset($uid);
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function esf_tc_content_types_node_grants($account, $op) {
  if ($account->uid) {
    $grants = array();
    if ($op == 'view') {
      // Check permission access to forum section.
      $wb_user_access_tree = workbench_access_get_user_tree($account);
      if (!empty($wb_user_access_tree)) {
        foreach ($wb_user_access_tree as $key => $term) {
          $grants['forum_private'][] = $key;
        }
      }
    }

    $grants['projectdb'][] = $account->uid;
    // Related organisations.
    $org = _esf_tc_content_type_get_organisation($account->uid);
    if (is_array($org) && count($org)) {
      $grants['projectdb_organisation'] = $org;
    }

    return $grants;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function esf_tc_content_types_preprocess_node(&$variables) {
  $node = $variables['node'];
  $content_type = $variables['type'];
  $mas = _esf_tc_content_types_get_responsible_authorities($content_type, $node);
}

/**
 * Implements template_preprocess_forums().
 */
function esf_tc_content_types_preprocess_forums(&$variables) {
  // Add custom content to forum page.
  if ($variables['tid'] != 0) {
    $variables['topics_title'] = t('Discussions');
    $variables['news'] = _esf_tc_content_types_render_view('esf_news', 'block_1', $variables['tid']);
    $variables['events'] = _esf_tc_content_types_render_view('esf_events', 'block_1', $variables['tid']);
    $variables['action_links'] = menu_local_actions();
  }
}

/**
 * Render view.
 */
function _esf_tc_content_types_render_view($view_name, $view_display, $param) {
  $output = '';
  $view = views_get_view($view_name);
  $view->set_display($view_display);
  $view->set_arguments(array($param));
  $view->pre_execute();
  $view->execute();
  if (!empty($view->result)) {
    $output = $view->render();
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function esf_tc_content_types_menu() {
  $items = array();

  $_type = array(
    'organisation' => 'Manage notifications for the organisations',
    'project' => 'Manage notifications for the projects',
  );

  $item_template = array(
    'access arguments' => array('administer nodes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('esf_tc_content_state_notification_form', 3),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'esf_tc_content_types.notification.inc',
  );

  // Notifications.
  $items['admin/config/esf-notifications'] = array(
    'title' => 'ESF Notifications',
    'description' => 'Manage email notifications.',
    'position' => 'right',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer nodes'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  foreach ($_type as $type => $description) {
    $item = $item_template;
    $item['title'] = ucfirst($type);
    $item['description'] = $description;
    $items['admin/config/esf-notifications/' . $type] = $item;
  }
  unset($type, $description);

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function esf_tc_content_types_menu_alter(&$items) {
  $items['forum/%forum_forum/join'] = array(
    'title' => 'Join the network',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => '_esf_tc_content_types_manage_networking',
    'page arguments' => array(1, 2),
    'access callback' => 'user_is_logged_in',
  );

  $items['forum/%forum_forum/remove'] = array(
    'title' => 'Remove me from the newtork',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => '_esf_tc_content_types_manage_networking',
    'page arguments' => array(1, 2),
    'access callback' => 'user_is_logged_in',
  );
}

/**
 * Helper function get the editorial status field name.
 */
function _esf_tc_content_types_get_editorial_status_field_name() {
  return variable_get('esf_tc_editorial_status_field_name', 'field_esf_editorial_status');
}

/**
 * Helper function get all content types used for Projects database.
 */
function _esf_tc_content_types_get_project_database_types() {
  return array(
    'esf_tnc_organisation',
    'esf_tnc_project',
    'esf_tnc_call_for_project',
    'esf_tnc_tca',
  );
}

/**
 * Helper function to check if user can access to the actions button.
 */
function _esf_tc_content_types_button_access($action, $content_type, $node, $status = NULL) {
  $content_types = _esf_tc_content_types_get_project_database_types();
  $editorial_status_field_name = _esf_tc_content_types_get_editorial_status_field_name();

  // Find status if not defined.
  if (!$status) {
    $status = field_get_items('node', $node, $editorial_status_field_name);
    if (is_array($status)) {
      $status = reset($current_status)['value'];
    }
  }

  if (in_array($content_type, $content_types)) {
    switch ($action) {
      case 'block':
        if (in_array($status, array(
          'published',
          'archived',
          'needs-deletion',
        ))) {
          if (user_access("block any $content_type content")) {
            return TRUE;
          }
          else {
            // Get all managing authorities linked and check current user.
            $mas = _esf_tc_content_types_get_responsible_authorities($content_type, $node);
            return _esf_tc_content_types_ma_access($mas);
          }
        }
        break;

      case 'archive':
        if ($status == 'published') {
          return user_access("archive any $content_type content");
        }
        break;

      case 'needs-deletion':
        if (!in_array($status, array('draft', 'needs-deletion'))) {
          if (node_access('update', $node)) {
            return TRUE;
          }
          else {
            // Get all managing authorities linked and check current user.
            $mas = _esf_tc_content_types_get_responsible_authorities($content_type, $node);
            return _esf_tc_content_types_ma_access($mas);
          }
        }
        break;

      case 'publish':
        if ($status == 'draft') {
          return TRUE;
        }
        elseif (in_array($status, array(
          'blocked',
          'archived',
          'needs-deletion',
        ))) {
          if (user_access("republish any $content_type content")) {
            return TRUE;
          }
          elseif ($status == 'blocked') {
            // Get all managing authorities linked and check current user.
            $mas = _esf_tc_content_types_get_responsible_authorities($content_type, $node);
            return _esf_tc_content_types_ma_access($mas);
          }
        }
        break;

      case 'submit':
        if ($status != 'archived') {
          return TRUE;
        }
        break;

    }
  }
  return FALSE;
}

/**
 * Helper function to get the Managing Authorities linked to the node.
 *
 * Return array of nodes.
 */
function _esf_tc_content_types_get_responsible_authorities($content_type, $node) {
  $content_types = _esf_tc_content_types_get_project_database_types();

  if (in_array($content_type, $content_types)) {
    $sql = db_select('field_data_field_org_is_ma_ib', 'MA')
      ->fields('MA', array('entity_id'))
      ->condition('field_org_is_ma_ib_value', '1');

    $sql->join('field_data_field_call_org_involved', 'calls', 'calls.field_call_org_involved_target_id = MA.entity_id');
    switch ($content_type) {
      case 'esf_tnc_organisation':
        $sql->join('field_data_field_project_call_for_projects', 'project', 'project.field_project_call_for_projects_target_id = calls.entity_id');
        $sql->join('field_data_field_project_lead_organisation', 'pjtorg', 'pjtorg.field_project_lead_organisation_target_id = :nid', array(':nid' => $node->nid));
        break;

      case 'esf_tnc_project':
        $sql->join('field_data_field_project_call_for_projects', 'project', 'project.field_project_call_for_projects_target_id = calls.entity_id and project.entity_id = :nid', array(':nid' => $node->nid));
        break;
    }
    if ($sql) {
      $result = $sql->execute()
        ->fetchCol();
      $result = array_unique($result);
      return $result;
    }
  }
  return array();
}

/**
 * Helper function to check if current user is an Managing Authorities granted.
 */
function _esf_tc_content_types_ma_access($mas) {
  if (is_array($mas) && count($mas)) {
    foreach ($mas as $ma) {
      $ma = node_load($ma);
      if (node_access('update', $ma)) {
        return TRUE;
      }
    }
    unset($ma);
  }
  return FALSE;
}

/**
 * Notify the forum moderator.
 */
function _esf_tc_content_types_manage_networking($forum_term, $op) {
  global $user;

  if ($op == 'join') {
    // Notify the forum moderator when asking to join.
    $emails = _esf_tc_content_types_get_forum_moderators($forum_term);
    if (empty($emails)) {
      drupal_set_message(t('There is currently no moderator for this network. Please contact the webmaster.'), 'warning');
    }
    else {
      rules_invoke_component('esf_tc_content_types_notify_forum_moderator_to_add_user', $user, $forum_term, $emails);
    }
  }
  elseif ($op == 'remove') {
    // Remove directly the user from the network.
    workbench_access_user_section_delete($user->uid, $forum_term->tid, 'taxonomy');
    drupal_set_message(t('Your access to the netowrk has been removed'));
  }

  // Redirect to forum page.
  drupal_goto(drupal_get_path_alias('forum/' . $forum_term->tid));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function esf_tc_content_types_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add local link to forum pages.
  if ($root_path == 'forum/%') {
    if (user_is_logged_in()) {
      $tid = (isset($router_item['page_arguments'][0]) ? $router_item['page_arguments'][0]->tid : 0);
      $forum_term = forum_forum_load($tid);
      if ($forum_term) {
        // Get the access tree for the user account.
        $user_access_tree = workbench_access_get_user_tree($user);

        // Add specific action link regarding the user is already member
        // of the network or not.
        $links = array();
        if (!array_key_exists($tid, $user_access_tree)) {
          $links['forum_join'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Join this network'),
              'href' => 'forum/' . $forum_term->tid . '/join',
            ),
          );
        }
        else {
          $links['forum_remove'] = array(
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Remove me from this network'),
              'href' => 'forum/' . $forum_term->tid . '/remove',
            ),
          );
        }
        $data['actions']['output'] = $links;
      }
    }
  }
}

/**
 * Get emails of moderators by forum.
 */
function _esf_tc_content_types_get_forum_moderators($forum_term) {
  $moderator_rid = ($role = user_role_load_by_name('forum moderator')) ? $role->rid : NULL;

  // Retrieve the moderators' emails of the network.
  $query = db_select('users', 'u')
    ->fields('u', array('uid', 'mail'));
  $query->join('workbench_access_user', 'wau', 'u.uid = wau.uid');
  $query->join('users_roles', 'ur', 'u.uid = ur.uid');
  $query->condition('wau.access_scheme', 'taxonomy')
    ->condition('wau.access_id', $forum_term->tid)
    ->condition('ur.rid', $moderator_rid);
  $result = $query->execute();

  $emails = array();
  foreach ($result as $account) {
    $emails[] = $account->mail;
  }
  return $emails;
}

/**
 * Return tid of a term in a specific vocabulary.
 */
function _esf_tc_content_types_get_term_id_by_vocabulary($term, $vocabulary) {
  $tid = NULL;
  $term_other_country = taxonomy_get_term_by_name($term, $vocabulary);
  if (!empty($term_other_country)) {
    $tid = array_pop($term_other_country)->tid;
  }
  return $tid;
}

/**
 * Implements hook_user_login().
 */
function esf_tc_content_types_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || variable_get('login_destination_immediate_redirect', FALSE)) {
    // Redirect an authenticated only user or contact user to the profile page
    // if no profile attached to user.
    // Add the role contact to the authenticated only user.
    if (in_array('contact', $account->roles) || count($account->roles) == 1) {
      if (count($account->roles) == 1) {
        $user = user_load($account->uid);
        $role = user_role_load_by_name('contact');
        $user->roles = $user->roles + array($role->rid => $role->name);
        user_save($user);
      }

      $contact_profile = profile2_load_by_user($account, 'contact_profile');
      if (empty($contact_profile)) {
        drupal_set_message(t('You have been redirected to fill out your contact information. You can also enter the token received in the email to link your account with an organisation.'));
        drupal_goto("user/$account->uid/edit/contact_profile");
      }
    }
  }
}

/**
 * Helper function to get entity references IDs.
 */
function _esf_tc_content_types_get_references_ids($field_name, $entity, $type = 'node') {
  $uids = array();
  $contacts = field_get_items($type, $entity, $field_name);
  if (is_array($contacts)) {
    foreach ($contacts as $contact) {
      if (isset($contact['target_id']) && $contact['target_id']) {
        $uids[] = $contact['target_id'];
      }
    }
    unset($contact);
  }
  return $uids;
}

/**
 * Helper function to get all organisation of a user.
 */
function _esf_tc_content_type_get_organisation($uid) {
  $nids = array();
  // Lead organisations.
  $select = db_select('field_data_field_org_contact', 'c')
    ->fields('c', array('entity_id'))
    ->condition('bundle', 'esf_tnc_organisation')
    ->condition('field_org_contact_target_id', $uid)
    ->execute()
    ->fetchCol();

  if (is_array($select) && count($select)) {
    $nids += $select;
  }
  // Additional contacts.
  $sql = db_select('field_data_field_fc_org_contact', 'fcc')
    ->condition('field_fc_org_contact_target_id', $uid)
    ->condition('fcc.bundle', 'field_org_additional_contacts');
  $sql->join('field_data_field_org_additional_contacts', 'cnt', 'cnt.field_org_additional_contacts_value = fcc.entity_id');
  $sql->fields('cnt', array('entity_id'));

  $select = $sql->execute()
    ->fetchCol();

  if (is_array($select) && count($select)) {
    $nids = array_merge($nids, $select);
  }

  $nids = array_unique($nids);
  return $nids;
}

/**
 * Helper function to display message on form when status is not published.
 */
function _esf_tc_content_type_display_message($node, $state) {
  switch ($state) {
    case 'draft':
      drupal_set_message(t('The status of this content is draft'), 'warning', TRUE);
      break;

    case 'blocked':
      drupal_set_message(t('This content is blocked, please contact the webmaster or the managing authority'), 'error', TRUE);
      break;

    case 'archived':
      drupal_set_message(t('This content is archived. Update is not allowed anymore'), 'warning', TRUE);
      break;

    case 'needs-deletion':
      drupal_set_message(t('This content is tagged as needs deletion. Please contact the webmaster if you need change the status'), 'error', TRUE);
      break;
  }
}

/**
 * Helper function to get all associated email to a node.
 */
function _esf_tc_content_types_get_associated_email($node, $with_ma = FALSE) {
  $emails = array();
  switch ($node->type) {
    case 'esf_tnc_organisation':
      // Legal contact.
      $has_account = field_get_items('node', $node, 'field_org_contact_account');
      if (is_array($has_account) && isset(reset($has_account)['value'])) {
        $has_account = reset($has_account)['value'];
      }
      if ($has_account == 'no') {
        $field_value = field_get_items('node', $node, 'field_org_contact_legal_email');
        if (is_array($field_value) && isset(reset($field_value)['value'])) {
          $emails = $field_value;
        }
      }
      elseif ($has_account == 'yes') {
        $uids = _esf_tc_content_types_get_references_ids('field_org_contact', $node);
        if (is_array($uids)) {
          foreach ($uids as $uid) {
            $user = user_load($uid);
            if ($user->mail) {
              $emails[] = $user->mail;
            }
          }
          unset($uid, $user);
        }
      }
      break;

    case 'esf_tnc_project':
      // Lead organisation.
      $field_value = _esf_tc_content_types_get_references_ids('field_project_lead_organisation', $node);
      if (is_array($field_value) & count($field_value)) {
        $nid = reset($field_value);
        $lead = node_load($nid);
        $contacts = _esf_tc_content_types_get_associated_email($lead);
        if (count($contacts)) {
          $emails = array_merge($emails, $contacts);
        }
      }
      // Other contacts.
      $contact_uids = array_merge(_esf_tc_content_types_get_references_ids('field_project_manager', $node), _esf_tc_content_types_get_references_ids('field_project_operat_contact', $node));
      if (is_array($contact_uids) && count($contact_uids)) {
        $contacts = array();
        foreach (user_load_multiple($contact_uids) as $_user) {
          if ($_user->mail) {
            $contacts[] = $_user->mail;
          }
        }
        unset($_user);
      }
      if (is_array($contacts) && count($contacts)) {
        $emails = array_merge($emails, $contacts);
      }
      break;
  }
  // Managing Authorities.
  if ($with_ma) {
    $mas = _esf_tc_content_types_get_responsible_authorities($node->type, $node);
    if (is_array($mas) && count($mas)) {
      foreach ($mas as $ma) {
        $ma = node_load($ma);
        $contacts = _esf_tc_content_types_get_associated_email($ma, TRUE);
        if (count($contacts)) {
          $emails = array_merge($emails, $contacts);
        }
      }
      unset($ma, $contacts);
    }
  }

  return array_unique($emails);
}

/**
 * Helper function to get Webmasters emails.
 */
function _esf_tc_content_types_get_webmasters_email($rolename = 'webmaster') {
  // Get Role rid.
  $role = user_role_load_by_name($rolename);
  if (is_object($role) && $rid = $role->rid) {
    $sql = db_select('users_roles', 'ur')
      ->fields('usr', array('mail'))
      ->condition('rid', $rid);
    $sql->join('users', 'usr', 'usr.uid = ur.uid');

    return $sql->execute()->fetchCol();
  }
}

/**
 * Implements hook_node_delete().
 */
function esf_tc_content_types_node_delete($node) {
  // Confirm delete notification.
  if (in_array($node->type, _esf_tc_content_types_get_project_database_types()) && $node->type != 'esf_tnc_call_for_project') {
    $emails = _esf_tc_content_types_get_associated_email($node, TRUE);
    $new_status = 'deleted';

    if (count($emails)) {
      // Get mail message.
      $options = array(
        'type' => 'editorial_status',
        'content_type' => $node->type,
        'action' => $new_status,
        'node' => $node,
      );
      $key_prefix = $node->type . '_notification_' . $new_status;

      foreach ($emails as $email) {
        drupal_mail('esf_tc_content_types', $key_prefix, $email, language_default(), $options);
      }
      unset($email);
    }
  }
}
