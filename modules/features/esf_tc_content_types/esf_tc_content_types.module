<?php
/**
 * @file
 * Code for the esf_tc_content_types feature.
 */

include_once 'esf_tc_content_types.features.inc';
include_once 'esf_tc_content_types.theme.inc';
include_once 'esf_tc_content_types.block.inc';

/**
 * Implements hook_node_presave().
 */
function esf_tc_content_types_node_presave($node) {
  // Store all contacts in specific grant access field for
  // an organisation content type.
  // Do not test if the scheduler info (publish_on) is present.
  if ($node->type == 'esf_tnc_organisation' && !isset($node->publish_on)) {
    $contacts = array();

    // Add a legal contact if an account exists.
    if ($node->field_org_contact_account['und'][0]['value'] == 'yes') {
      $contacts[] = array('target_id' => $node->field_org_contact['und'][0]['target_id']);
    }

    // Add additional contacts if an account exists.
    foreach ($node->field_org_additional_contacts['und'] as $key => $additional_contact) {
      if (isset($additional_contact['field_fc_contact_account']) && $additional_contact['field_fc_contact_account']['und'][0]['value'] == 'yes') {
        $contacts[] = array('target_id' => $additional_contact['field_fc_org_contact']['und'][0]['target_id']);
      }
    }

    if (!empty($contacts)) {
      $node->field_org_content_managers['und'] = $contacts;
    }
  }

  if ($node->type == 'esf_tnc_global_call' && !isset($node->publish_on)) {
    $organisations = array();
    // Add all organisations selected in the Thematic details field collection.
    foreach ($node->field_call_coordinated_calls['und'] as $key_org => $organisations_list) {
      $organisations[] = array('target_id' => $organisations_list['field_fc_call_ma_ibs_']['und'][0]['target_id']);
    }

    if (!empty($organisations)) {
      $node->field_call_content_managers['und'] = $organisations;
    }
  }

  if ($node->type == 'esf_tnc_tca' && !isset($node->publish_on)) {
    $projects = array();
    // Add all projects selected in the Partner organisation field collection.
    foreach ($node->field_tca_partner_organisations['und'] as $key_org => $projects_list) {
      $projects[] = array('target_id' => $projects_list['field_fc_partner_project']['und'][0]['target_id']);
    }

    if (!empty($projects)) {
      $node->field_tca_content_managers_tca['und'] = $projects;
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter organisation node form.
 */
function esf_tc_content_types_form_esf_tnc_organisation_node_form_alter(&$form, &$form_state, $form_id) {
  // Add after build function to manage states on field collection.
  $form['field_org_additional_contacts']['und']['#after_build'][] = 'esf_tc_content_types_field_org_additional_contacts_after_build';

  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';

  // Change Field Access.
  if (user_access('administer nodes')) {
    $form['field_org_content_managers']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
      'disabled' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
    );
  }
  else {
    $form['field_org_content_managers']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => FALSE),
      ),
    );

    $form['field_org_flag_featured']['#access'] = FALSE;
    $form['field_org_logo_promotional']['#access'] = FALSE;
    $form['field_org_high_promo_txt_section']['#access'] = FALSE;

  }

  // Manage legal contact.
  $form['field_org_contact_legal_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact_legal_email']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'no'),
    ),
  );

  $form['field_org_contact']['#states'] = array(
    'visible' => array(
      ':input[name="field_org_contact_account[und]"]' => array('value' => 'yes'),
    ),
  );
}

/**
 * Custom afterbuild function to manage additional contact field collection.
 */
function esf_tc_content_types_field_org_additional_contacts_after_build($form, &$form_state) {
  // Add states.
  foreach ($form as $k => $v) {
    if (isset($v['#entity_type']) && $v['#entity_type'] == 'field_collection_item') {
      $form[$k]['field_fc_org_contact']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes'),
        ),
      );

      $form[$k]['field_fc_org_name']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_email']['#states'] = array(
        'required' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
        'visible' => array(
          ':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no'),
        ),
      );

      $form[$k]['field_fc_org_role']['#states'] = array(
        'required' => array(
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'no')),
          'or',
          array(':input[name="field_org_additional_contacts[und][' . $k . '][field_fc_contact_account][und]"]' => array('value' => 'yes')),

        ),
      );

    }

  }

  return $form;
}

/**
 * Implements hook_form_alter().
 *
 * Alter project node form.
 */
function esf_tc_content_types_form_esf_tnc_project_node_form_alter(&$form, &$form_state, $form_id) {

  $type = $form['type']['#value'];

  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter project node form.
 */
function esf_tc_content_types_form_esf_tnc_global_call_node_form_alter(&$form, &$form_state, $form_id) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';

  if (user_access('administer nodes')) {
    $form['field_call_content_managers']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
      'disabled' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
    );
  }
  else {
    $form['field_call_content_managers']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => FALSE),
      ),
    );
  }

  $form['field_esf_type_call']['#states'] = array(
    'required' => array(
      ':input[name="field_esf_editorial_status[und]"]' => array('value' => 'published'),
    ),
  );

  $form['field_call_coordinated_calls']['und'][0]['field_fc_call_ma_ibs_']['#states'] = array(
    'required' => array(
      ':input[name="field_esf_editorial_status[und]"]' => array('value' => 'published'),
    ),
  );
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter TCA node form.
 */
function esf_tc_content_types_form_esf_tnc_tca_node_form_alter(&$form, &$form_state, $form_id) {
  // Add custom validate function.
  $form['#validate'][] = 'esf_tc_content_types_projects_database_draft_validate';

  // Change Field Access.
  if (user_access('administer nodes')) {
    $form['field_tca_content_managers_tca']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
      'disabled' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => TRUE),
      ),
    );
  }
  else {
    $form['field_tca_content_managers_tca']['#states'] = array(
      'visible' => array(
        ':input[name="field_esf_editorial_status[und]"]' => array('filled' => FALSE),
      ),
    );
  }

  $form['field_tca_partner_organisations']['#states'] = array(
    'required' => array(
      ':input[name="field_esf_editorial_status[und]"]' => array('value' => 'published'),
    ),
  );
}

/**
 * Project database (4 content types) custom validation for drafting.
 */
function esf_tc_content_types_projects_database_draft_validate(&$form, &$form_state) {

  $editorial_field_name = _esf_tc_content_types_get_editorial_status_field_name();
  $state = reset($form_state['values'][$editorial_field_name][LANGUAGE_NONE])['value'];

  $errors = form_get_errors();

  if($state == 'draft') {
    if ($errors) {
      // Clear errors.
      form_clear_error();
      // Remove error messages.
      $error_messages = drupal_get_messages('error');
      $removed_messages = array();

      foreach ($errors as $name => $error_message) {
        // Get Field title;
        $field_name = explode(']',$name) [0];
        $is_date = false;
        $required_error = '';

        if ($field_name) {
          $field_info = field_info_field($field_name);
          $field_instance = field_info_instance($form['#entity_type'], $field_name, $form['#bundle']);
          $required_error = t('!name field is required.', array('!name' => $field_instance['label']));
          $is_date = $field_info['module'] == 'date';
        }
        if (strstr($name, 'title_field]') === FALSE && ($required_error == $error_message || $is_date)) {
          $removed_messages[] = $error_message;
          unset($errors[$name]);
        }
        else {
          form_set_error($name, $error_message);
        }
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function esf_tc_content_types_node_access_records($node) {
  // Denied Access for non-public forum node.
  if (is_object($node) && $node->type == 'forum') {
    $field = field_get_items('node', $node, 'field_topic_public', LANGUAGE_NONE);
    $public = reset($field)['value'];

    if (!$public) {
      $grants = array();
      $grants[] = array(
        'realm' => 'forum_private',
        'gid' => 1,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      );
      return $grants;
    }
  }
}

/**
 * Implements hook_node_grants().
 */
function esf_tc_content_types_node_grants($account, $op) {
  if ($account->uid) {
    $grants = array(
      'forum_private' => array(array(1)),
    );
    return $grants;
  }
}

/**
 * Helper function get the editorial status field name.
 */
function _esf_tc_content_types_get_editorial_status_field_name() {
  return variable_get('esf_tc_editorial_status_field_name', 'field_esf_editorial_status');
}

/**
 * Helper function get all content types used for Projects database.
 */
function _esf_tc_content_types_get_project_database_types() {
  return array(
    'esf_tnc_project',
    'esf_tnc_project',
    'esf_tnc_global_call',
    'esf_tnc_tca',
  );
}